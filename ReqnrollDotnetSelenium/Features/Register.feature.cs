// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ReqnrollDotnetSelenium.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::NUnit.Framework.TestFixtureAttribute()]
    [global::NUnit.Framework.DescriptionAttribute("Register")]
    [global::NUnit.Framework.FixtureLifeCycleAttribute(global::NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class RegisterFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Register", "In order to use the Advantage Shopping site\r\n  As a user\r\n  I want to be verify R" +
                "egister Account with different sets of data", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "Register.feature"
#line hidden
        
        [global::NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [global::NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::NUnit.Framework.TestContext>(global::NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/Register.feature", 12);
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account With Empty Username")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithEmptyUsername()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account With Empty Username", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 8
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
 await testRunner.WhenAsync("I enter username \"\" and email \"abc@adv.com\" and password \"password123\" and confir" +
                        "m password \"password123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.ThenAsync("I should see error message \"Username field is required\" for username field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account With Short Username")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithShortUsername()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account With Short Username", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 15
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
 await testRunner.WhenAsync("I enter username \"abc\" and email \"abc@adv.com\" and password \"password123\" and con" +
                        "firm password \"password123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
 await testRunner.ThenAsync("I should see error message \"Use 5 character or longer\" for username field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account With Empty Email")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithEmptyEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account With Empty Email", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 22
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
 await testRunner.WhenAsync("I enter username \"abcdef\" and email \"\" and password \"password123\" and confirm pas" +
                        "sword \"password123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
 await testRunner.ThenAsync("I should see error message \"Email field is required\" for email field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account With Incorrect Email")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithIncorrectEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account With Incorrect Email", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 29
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
 await testRunner.WhenAsync("I enter username \"abcdef\" and email \"abc\" and password \"password123\" and confirm " +
                        "password \"password123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
 await testRunner.ThenAsync("I should see error message \"Your email address isn\'t formatted correctly\" for ema" +
                        "il field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account With Empty Password")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithEmptyPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "4";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account With Empty Password", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 36
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 38
 await testRunner.WhenAsync("I enter username \"abcdef\" and email \"abc@adv.com\" and password \"\" and confirm pas" +
                        "sword \"password123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
 await testRunner.ThenAsync("I should see error message \"Password field is required\" for password field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account With Short Password")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithShortPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "5";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account With Short Password", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 43
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 44
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 45
 await testRunner.WhenAsync("I enter username \"abcde\" and email \"abc@adv.com\" and password \"abc\" and confirm p" +
                        "assword \"abc\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
 await testRunner.ThenAsync("I should see error message \"Use 4 character or longer\" for password field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account Without Upper Letter in Password")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithoutUpperLetterInPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "6";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account Without Upper Letter in Password", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 50
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 51
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
 await testRunner.WhenAsync("I enter username \"abcdef\" and email \"abc@adv.com\" and password \"abcdef\" and confi" +
                        "rm password \"abcdef\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.ThenAsync("I should see error message \"One upper letter required\" for password field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account Without Lower Letter in Password")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithoutLowerLetterInPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "7";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account Without Lower Letter in Password", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 57
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 58
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
 await testRunner.WhenAsync("I enter username \"abcdef\" and email \"abc@adv.com\" and password \"ABCDEF1\" and conf" +
                        "irm password \"ABCDEF1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
 await testRunner.ThenAsync("I should see error message \"One lower letter required\" for password field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account Without Number in Password")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithoutNumberInPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "8";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account Without Number in Password", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 64
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 65
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 66
 await testRunner.WhenAsync("I enter username \"abcdef\" and email \"abc@adv.com\" and password \"Password\" and con" +
                        "firm password \"Password\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
 await testRunner.ThenAsync("I should see error message \"One number required\" for password field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Create New Account With Empty Confirm Password")]
        [global::NUnit.Framework.CategoryAttribute("CreateNewAccount")]
        [global::NUnit.Framework.CategoryAttribute("smoketest")]
        [global::NUnit.Framework.CategoryAttribute("regressiontest")]
        public async global::System.Threading.Tasks.Task CreateNewAccountWithEmptyConfirmPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateNewAccount",
                    "smoketest",
                    "regressiontest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "9";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create New Account With Empty Confirm Password", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 71
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 72
 await testRunner.GivenAsync("I am on Register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 73
 await testRunner.WhenAsync("I enter username \"abcdef\" and email \"abc@adv.com\" and password \"Password123\" and " +
                        "confirm password \"\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
 await testRunner.AndAsync("I Agree to the conditions of Use and Privacy Notice", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
 await testRunner.ThenAsync("I should see error message \"Confirm password field is required\" for confirm passw" +
                        "ord field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
